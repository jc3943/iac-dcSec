//Authored by Jeff Comer

pipeline {
  environment {
        BRANCH_NAME = "${GIT_BRANCH}"
        varPath = "vars/" + "${BRANCH_NAME}"
        APIC_CREDS = credentials('apic-creds')
        apicSnap = "acisim-521g-base-" + "${BRANCH_NAME}"
        apicVm = "acisim-5.2-1g-" + "${BRANCH_NAME}"
        apicInventory = "./creds/inv-" + "${BRANCH_NAME}"
        apicInventoryx509 = "./creds/inv-" + "${BRANCH_NAME}" + "-x509"
        vcsaHostName = "vcsa-" + "${BRANCH_NAME}" + ".thor.iws.navy.mil"
  }
  agent any
  
  stages{

    stage('Add credentials to APIC') {
      steps {
          //create user for signature-based auth for all other aci playbooks
          ansiblePlaybook(
              playbook: './aci/aciCreate-cert-userv3.yml',
              inventory: '$apicInventory',
              colorized: true
          )
      }
    }
    stage('Fabric Discovery and Base Config') {
      steps {
          //kick off discovery and configure base fabric parameters
          sh 'python3 aci/aciBuildInventory.py'
          ansiblePlaybook(
              playbook: './aci/aciBuildFabric.yml',
              inventory: '$apicInventoryx509',
              extras: '--extra-vars="@$varPath/aci/switch-inventory.yaml"',
              colorized: true
          )
          ansiblePlaybook(
              playbook: './aci/aciVmmDomain.yml',
              inventory: '$apicInventoryx509',
              extras: '--extra-vars="@$varPath/aci/switch-inventory.yaml"',
              colorized: true
          )
      }
    }
    stage('Configure Ports and VMM Integration') {
      steps {
          //configure aci fabric ports
          sh 'python3 aci/aciCreate_port_yaml.py'
          ansiblePlaybook(
              playbook: './aci/aciIntf-create.yml',
              inventory: '$apicInventoryx509',
              extras: '--extra-vars="@$varPath/aci/aci-ports.yaml"',
              colorized: true
          )
          //Shut vpc ports for HX Edge in prep for install
          //sh 'python3 aci/aciHxVpcOps.py -u $APIC_CREDS_USR -p $APIC_CREDS_PSW -i 172.20.104.7 -f $varPath/aci/port-defs.csv -a shut'
          //create vmm integration with vcsa
          ansiblePlaybook(
              playbook: './aci/aciVmmDomain.yml',
              inventory: '$apicInventoryx509',
              extras: '--extra-vars="@$varPath/aci/switch-inventory.yaml"',
              colorized: true
          )
      }
    }
    stage('Create and Configure Tenant') {
      steps {
          //Build tenant from vars
          sh 'python3 aci/aciCreate_yaml_from_csv_v4.3.py -i $varPath/aci/tenant.csv -o  $varPath/aci/tenant.yaml'
          ansiblePlaybook(
              playbook: './aci/aciMake-tenants-x509v4.3.yml',
              inventory: '$apicInventoryx509',
              extras: '--extra-vars="@$varPath/aci/tenant.yaml"',
              colorized: true
          )
          ansiblePlaybook(
              playbook: './aci/aciJsonLoad.yml',
              inventory: '$apicInventoryx509',
              extraVars: [
                  json_payload: "../$varPath/aci/L3-Out.json"
              ],
              colorized: true
          )
          ansiblePlaybook(
              playbook: './aci/aep-epg-bm.yml',
              inventory: '$apicInventoryx509',
              colorized: true
          )
          ansiblePlaybook(
              playbook: './aci/aciDhcpRelay.yml',
              inventory: '$apicInventoryx509',
              colorized: true
          )
      }
    }
  }
}